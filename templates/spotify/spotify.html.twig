{% extends 'base.html.twig' %}

{% block title %}Hello SpotifyController!{% endblock %}

{% block body %}
<table class="table">
  <thead class="thead-dark">
    <tr>
      <th scope="col">Nom de la playlist</th>

    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">1</th>
      <td>Artiste</td>
      <td>Nom de la musique</td>
      <td>durée de la musique</td>
    </tr>
    <tr>
      <th scope="row">2</th>
      <td>Artiste</td>
      <td>Nom de la musique</td>
      <td>durée de la musique</td>
    </tr>
    <tr>
      <th scope="row">3</th>
      <td>Artiste</td>
      <td>Nom de la musique</td>
      <td>durée de la musique</td>
    </tr>
  </tbody>
</table>

{% endblock %}

{% block js %}

{{parent()}}

<script>
var Spotify = require('spotify-web-api-js');
var s = new Spotify();


let spotifyApi = new SpotifyWebApi();

const { Client } = require("node_modules/spotify-api.js");
const client = new Client({ 
    token: { clientID: '91db317bc7794f168be20c73c905b3d1', clientSecret: '4aa452c6e44c4a9a8a1db9702b824f88' },
    // Ready event is required if you are providing clientID and clientSecret fields.
    // As the client has to create the token first with it and then emits the ready event.
    onReady() {
        console.log(await client.tracks.get('id'));
    }
})
{# 
const { Client } = require('spotify-api.js');

const client = await Client.create({
    token: {
        clientID: '91db317bc7794f168be20c73c905b3d1', // Your spotify application client id.
        clientSecret: '4aa452c6e44c4a9a8a1db9702b824f88', // Your spotify application client secret.
        code: 'code', // The code search query from the web redirect. Do not use this field if your aim is to refresh the token.
        refreshToken: 'refreshToken', // Use this field only if your aim is to refresh your token instead of getting new one put your refresh token here.
        redirectURL: 'https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=token&redirect_uri=$http://localhost:8000/spotify/callback/' // The redirect url which you have used when redirected to the login page.
    }
}); #}

console.log(client.token); // The current user token. 
await client.artists.follow("SOME ARTIST ID"); // And can use the api methods which are for current user if you have the paticular scopes...

</script>




{# <script>
  // Document has been loaded
  $(document).ready(function () {
    // Helper Function to Extract Access Token for URL
    const getUrlParameter = (sParam) => {
      let sPageURL = window.location.search.substring(1),////substring will take everything after the https link and split the #/&
        sURLVariables = sPageURL != undefined && sPageURL.length > 0 ? sPageURL.split('#') : [],
        sParameterName,
        i;
      let split_str = window.location.href.length > 0 ? window.location.href.split('#') : [];
      sURLVariables = split_str != undefined && split_str.length > 1 && split_str[1].length > 0 ? split_str[1].split('&') : [];
      for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] === sParam) {
          return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
        }
      }
    };

    // Get Access Token
    const accessToken = getUrlParameter('access_token');

    // AUTHORIZE with Spotify (if needed)
    // *************** REPLACE THESE VALUES! *************************
    let client_id = {{client_id}};
  // Use the following site to convert your regular url to the encoded version:
  // https://www.url-encode-decode.com/
  let redirect_uri = 'http://localhost:8000/spotify/callback/'; // GitHub Pages URL or whatever your public url to this app is
  // *************** END *************************

  const redirect = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=token&redirect_uri=${redirect_uri}`;
  // Don't authorize if we have an access token already
  if (accessToken == null || accessToken == "" || accessToken == undefined) {
    window.location.replace(redirect);
  }


  // Make Spotify API call
  // Note: We are using the track API endpoint.
  $.ajax({
    url: `https://api.spotify.com/v1/me/playlists` https://api.spotify.com/v1/users/{my-username}/playlists?limit=3&offset=0,
    type: 'GET',
    dataType: 'json',
    headers: {
      'Authorization': 'Bearer ' + accessToken
    },
    success: function (data) {
      console.log(data);
      var html = ``;
      for (playlist of data) {
        html += `
              <tr> 
                <td>${playlist.name}</td>
              </tr>
       `
        
      }

      $(`#table tbody`).html(html);
    }

  }); // End of Spotify ajax call
 }); // End of document.ready

</script> #}

{% endblock %}